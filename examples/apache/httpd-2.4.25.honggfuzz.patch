diff -Nur httpd-2.4.25.orig/compile.sh httpd-2.4.25/compile.sh
--- httpd-2.4.25.orig/compile.sh	1970-01-01 01:00:00.000000000 +0100
+++ httpd-2.4.25/compile.sh	2017-01-30 16:00:28.645176509 +0100
@@ -0,0 +1,7 @@
+#!/bin/sh
+
+# W/o ASAN
+CC=clang-4.0 LIBS="/home/swiecki/src/honggfuzz/libhfuzz/libhfuzz.a -L/home/swiecki/fuzz/apache/nghttp2-1.19.0/lib/" CFLAGS="-I/home/swiecki/fuzz/apache/nghttp2-1.19.0/lib/includes -march=skylake -g -ggdb -fno-builtin -fno-inline -funroll-loops -fsanitize-coverage=trace-pc-guard,trace-cmp,indirect-calls" LDFLAGS="-static $CFLAGS" ./configure --enable-unixd --disable-pie --enable-mods-static=few --prefix=/home/swiecki/fuzz/apache/apache2/ --with-mpm=event --enable-http2 --with-apr=/home/swiecki/fuzz/apache/apr-1.5.2/ --with-apr-util=/home/swiecki/fuzz/apache/apr-util-1.5.4/ --with-nghttp2=/home/swiecki/fuzz/apache/nghttp2-1.19.0 --enable-nghttp2-staticlib-deps
+
+# With ASAN
+# CC=clang-4.0 LIBS="/home/swiecki/src/honggfuzz/libhfuzz/instrument.o /home/swiecki/src/honggfuzz/libhfuzz/libhfuzz.a -L/home/swiecki/fuzz/apache/nghttp2-1.19.0/lib/" CFLAGS="-I/home/swiecki/fuzz/apache/nghttp2-1.19.0/lib/includes -march=skylake -g -ggdb -fno-builtin -fno-inline -fsanitize=address -fsanitize-coverage=trace-pc-guard,trace-cmp,indirect-calls" LDFLAGS="$CFLAGS" ./configure --enable-unixd --disable-pie --enable-mods-static=few --prefix=/home/swiecki/fuzz/apache/apache2/ --with-mpm=event --enable-http2 --with-apr=/home/swiecki/fuzz/apache/apr-1.5.2/ --with-apr-util=/home/swiecki/fuzz/apache/apr-util-1.5.4/ --with-nghttp2=/home/swiecki/fuzz/apache/nghttp2-1.19.0 --enable-nghttp2-staticlib-deps
diff -Nur httpd-2.4.25.orig/server/main.c httpd-2.4.25/server/main.c
--- httpd-2.4.25.orig/server/main.c	2016-06-14 01:08:08.000000000 +0200
+++ httpd-2.4.25/server/main.c	2017-01-30 15:54:54.990776807 +0100
@@ -437,8 +437,136 @@
     destroy_and_exit_process(process, 1);
 }
 
-int main(int argc, const char * const argv[])
+#include <sched.h>
+#include <linux/sched.h>
+#include <arpa/inet.h>
+#include <errno.h>
+#include <net/if.h>
+#include <net/route.h>
+#include <netinet/ip6.h>
+#include <netinet/tcp.h>
+#include <sched.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+#include <strings.h>
+#include <sys/ioctl.h>
+#include <sys/resource.h>
+#include <sys/socket.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <unistd.h>
+
+static void netIfaceUp(const char *ifacename)
+{
+    int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
+    if (sock == -1) {
+        perror("socket(AF_INET, SOCK_STREAM, IPPROTO_IP)");
+        _exit(1);
+    }
+
+    struct ifreq ifr;
+    memset(&ifr, '\0', sizeof(ifr));
+    snprintf(ifr.ifr_name, IF_NAMESIZE, "%s", ifacename);
+
+    if (ioctl(sock, SIOCGIFFLAGS, &ifr) == -1) {
+        perror("ioctl(iface='lo', SIOCGIFFLAGS, IFF_UP)");
+        _exit(1);
+    }
+
+    ifr.ifr_flags |= (IFF_UP | IFF_RUNNING);
+
+    if (ioctl(sock, SIOCSIFFLAGS, &ifr) == -1) {
+        perror("ioctl(iface='lo', SIOCSIFFLAGS, IFF_UP)");
+        _exit(1);
+    }
+
+    close(sock);
+}
+
+void unsh(void)
 {
+    unshare(CLONE_NEWUSER | CLONE_NEWNET | CLONE_NEWNS);
+
+    if (mount("tmpfs", "/tmp", "tmpfs", 0, "") == -1) {
+        perror("tmpfs");
+        _exit(1);
+    }
+    netIfaceUp("lo");
+}
+
+void HF_ITER(uint8_t ** buf_ptr, size_t * len_ptr);
+
+static void GETDATA(void)
+{
+    usleep(100000);
+
+    for (;;) {
+        size_t len;
+        uint8_t *buf;
+
+        HF_ITER(&buf, &len);
+
+        int myfd = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
+        if (myfd == -1) {
+            perror("socket");
+            _exit(1);
+        }
+
+        int sz = (1024 * 1024);
+        if (setsockopt(myfd, SOL_SOCKET, SO_SNDBUF, &sz, sizeof(sz)) == -1) {
+            perror("setsockopt");
+            exit(1);
+        }
+
+        struct sockaddr_in saddr;
+        saddr.sin_family = AF_INET;
+        saddr.sin_port = htons(8080);
+        saddr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
+        if (connect(myfd, &saddr, sizeof(saddr)) == -1) {
+            perror("connect");
+            continue;
+        }
+
+        if (send(myfd, buf, len, MSG_NOSIGNAL) != len) {
+            perror("send() failed 1");
+            exit(1);
+        }
+
+        if (shutdown(myfd, SHUT_WR) == -1) {
+            perror("shutdown");
+            exit(1);
+        }
+
+        char b[1024 * 1024];
+        while (recv(myfd, b, sizeof(b), MSG_WAITALL) > 0) ;
+
+        close(myfd);
+    }
+}
+
+static void LAUNCHTHR()
+{
+    pthread_t t;
+    pthread_attr_t attr;
+
+    pthread_attr_init(&attr);
+    pthread_attr_setstacksize(&attr, 1024 * 1024 * 8);
+    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
+
+    pthread_create(&t, &attr, GETDATA, NULL);
+}
+
+int main(int argc, const char *const argv[])
+{
+
+    if (getenv("NO_FUZZ") == NULL) {
+        unsh();
+        LAUNCHTHR();
+    }
+
     char c;
     int showcompile = 0, showdirectives = 0;
     const char *confname = SERVER_CONFIG_FILE;
